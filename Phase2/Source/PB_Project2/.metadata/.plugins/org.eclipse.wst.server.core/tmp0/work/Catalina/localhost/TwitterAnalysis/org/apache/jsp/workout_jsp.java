/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.35
 * Generated at: 2018-11-26 01:40:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;

public final class workout_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n");
      out.write("<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n");
      out.write("<script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js\"></script>\n");
      out.write("<script src=\"https://code.highcharts.com/highcharts-3d.js\"></script>\n");
      out.write("<script type=\"text/javascript\"\n");
      out.write("\tsrc=\"http://code.jquery.com/jquery-1.7.1.min.js\"></script>\n");
      out.write("<title>Insert title here</title>\n");

	List<String> keys = (List<String>) request.getAttribute("keys");
	List<Integer> values = (List<Integer>) request.getAttribute("values");

      out.write("\n");
      out.write("<script language=\"JavaScript\">\n");
      out.write("    var series = [];\n");
      out.write("    ");
for (int i = 0; i < keys.size(); i++) {
      out.write("\n");
      out.write("        console.log(");
      out.print(keys.get(i));
      out.write(");\n");
      out.write("        series.push(['");
      out.print(keys.get(i));
      out.write('\'');
      out.write(',');
      out.write(' ');
      out.print(values.get(i));
      out.write("]);\n");
      out.write("    ");
}
      out.write("\n");
      out.write("    console.log(series);\n");
      out.write(" </script>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<div id=\"container\" style=\"width: 550px; height: 400px; margin: 0 auto\"></div>\n");
      out.write("</body>\n");
      out.write("<script language=\"JavaScript\">\n");
      out.write("\n");
      out.write("    $(document).ready(function() {\n");
      out.write("    \n");
      out.write("    chart = new Highcharts.Chart({\n");
      out.write("        chart: {\n");
      out.write("            renderTo: 'container',\n");
      out.write("            type: 'pie',\n");
      out.write("            options3d: {\n");
      out.write("                enabled: true,\n");
      out.write("                alpha: 45\n");
      out.write("            }\n");
      out.write("        },\n");
      out.write("        title:\n");
      out.write("        {\n");
      out.write("        \ttext:'Different Popular Diseses All Over World'\n");
      out.write("        },\n");
      out.write("        plotOptions: {\n");
      out.write("            pie: {\n");
      out.write("                \n");
      out.write("                innerSize:100,\n");
      out.write("                depth:45,\n");
      out.write("                dataLabels: {\n");
      out.write("                    formatter: function(){\n");
      out.write("                        console.log(this);\n");
      out.write("                             this.point.visible = true;\n");
      out.write("                            return this.key;\n");
      out.write("                        }\n");
      out.write("\t\t\t\t\t   }\n");
      out.write("                    }\n");
      out.write("                \n");
      out.write("        },\n");
      out.write("        \n");
      out.write("        series: [{\n");
      out.write("            data: [\n");
      out.write("            \t");
for (int i = 0; i < keys.size() - 1; i++) {
      out.write("\n");
      out.write("        {name:'");
      out.print(keys.get(i));
      out.write("', y:");
      out.print(values.get(i));
      out.write("},\n");
      out.write("    ");
}
      out.write("\n");
      out.write("                {name:'");
      out.print(keys.get(keys.size() - 1));
      out.write("', y:");
      out.print(values.get(values.size() - 1));
      out.write("}\n");
      out.write("            ]\n");
      out.write("        }]\n");
      out.write("    });\n");
      out.write("});\n");
      out.write("</script>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
