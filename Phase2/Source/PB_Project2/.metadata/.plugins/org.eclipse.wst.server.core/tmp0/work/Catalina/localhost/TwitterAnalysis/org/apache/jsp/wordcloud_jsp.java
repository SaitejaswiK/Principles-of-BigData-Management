/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.35
 * Generated at: 2018-11-26 01:40:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class wordcloud_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"utf-8\">\n");
      out.write("\t<title>D3 CSV</title>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n");
      out.write("<script src=\"d3.layout.cloud.js\"></script>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("var fill = d3.scale.category20();\n");
      out.write("\n");
      out.write("var cityData = [],\n");
      out.write("\tcityPop = [], \n");
      out.write("    width = 1800, \n");
      out.write("    height = 1800,\n");
      out.write("    radius= 700;\n");
      out.write("\n");
      out.write("d3.csv(\"word.csv\", function(data) {\n");
      out.write("    data.forEach( function (d) {\n");
      out.write("        cityData.push(d.word);\n");
      out.write("        cityPop.push(d.count);\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    d3.layout.cloud().size([500, 500])\n");
      out.write("        .words(cityData.map(function(_,i) {\n");
      out.write("            return {text: cityData[i], size:10 + cityPop[i] / 100};\n");
      out.write("        }))\n");
      out.write("        .rotate(function() { return ~~(Math.random() * 2) * 90; })\n");
      out.write("        .font(\"Impact\")\n");
      out.write("        .fontSize(function(d) { return d.size; })\n");
      out.write("        .on(\"end\", draw)\n");
      out.write("        .start();\n");
      out.write("\n");
      out.write("});\n");
      out.write("\n");
      out.write("function draw(words) {\n");
      out.write("d3.select(\"body\").append(\"svg\")\n");
      out.write("    .attr(\"width\", 2000)\n");
      out.write("    .attr(\"height\", 1200)\n");
      out.write("    .attr(\"radius\", 2000)\n");
      out.write("    .append(\"g\")\n");
      out.write("    .attr(\"transform\", \"translate(400,400\t)\")\n");
      out.write("    .selectAll(\"text\")\n");
      out.write("    .data(words)\n");
      out.write("    .enter().append(\"text\")\n");
      out.write("    .style(\"font-size\", function(d) { \n");
      out.write("    console.log(words);\n");
      out.write("    return d.size+\"px\"; })\n");
      out.write("    .style(\"font-family\", \"Impact\")\n");
      out.write("    .style(\"fill\", function(d, i) { return fill(i); })\n");
      out.write("    .attr(\"text-anchor\", \"middle\")\n");
      out.write("    .attr(\"transform\", function(d) {\n");
      out.write("        return \"translate(\" + [d.x, d.y] + \")rotate(\" + d.rotate + \")\";\n");
      out.write("    })\n");
      out.write("    .text(function(d) { return d.text; });\n");
      out.write("}\t\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
